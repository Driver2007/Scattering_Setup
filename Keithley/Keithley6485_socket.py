#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        Keithley6485.py
## 
## Project :     Keithley 6485 Picoammeter
##
## This file is part of Tango device class.
## 
## Tango is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## Tango is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with Tango.  If not, see <http://www.gnu.org/licenses/>.
## 
##
## $Author :      tnunez$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""Class for controlling the Keithley Picoammeter Model 6485 via socket interface"""

__all__ = ["Keithley6485", "Keithley6485Class", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(Keithley6485.additionnal_import) ENABLED START -----#

import os
import socket

#----- PROTECTED REGION END -----#	//	Keithley6485.additionnal_import

## Device States Description
## ON : 
## FAULT : 

class Keithley6485 (PyTango.Device_4Impl):

    #--------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Keithley6485.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Keithley6485.global_variables

    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        Keithley6485.init_device(self)
        #----- PROTECTED REGION ID(Keithley6485.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(Keithley6485.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Current_read = 0.0
        self.attr_AutoZero_read = 0
        self.attr_ZeroCheck_read = 0
        self.attr_ZeroCorrect_read = 0
        self.attr_Range_read = 0.0
        self.attr_IntegrationRate_read = 0.0
        self.attr_AutoRange_read = 0
        #----- PROTECTED REGION ID(Keithley6485.init_device) ENABLED START -----#

        try:
            self.sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            self.sock.connect((self.IPAdress,self.PortNb))
            self.sock.settimeout(3.)
            self.set_state(PyTango.DevState.ON)
        except:
            self.set_state(PyTango.DevState.FAULT)
            
            
        #----- PROTECTED REGION END -----#	//	Keithley6485.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(Keithley6485.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.always_executed_hook

    #-----------------------------------------------------------------------------
    #    Keithley6485 read/write attribute methods
    #-----------------------------------------------------------------------------
    
    def read_Current(self, attr):
        self.debug_stream("In read_Current()")
        #----- PROTECTED REGION ID(Keithley6485.Current_read) ENABLED START -----#

        answer = self.socket_write_read("READ?")

        answer = answer.split(',')[0].replace("A", "")
        
        self.attr_Current_read = float(answer)
         
        attr.set_value(self.attr_Current_read)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.Current_read
        
    def read_AutoZero(self, attr):
        self.debug_stream("In read_AutoZero()")
        #----- PROTECTED REGION ID(Keithley6485.AutoZero_read) ENABLED START -----#

        answer = self.socket_write_read("SYST:AZER:STAT?")

        self.attr_AutoZero_read = int(answer)
        
        attr.set_value(self.attr_AutoZero_read)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.AutoZero_read
        
    def write_AutoZero(self, attr):
        self.debug_stream("In write_AutoZero()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(Keithley6485.AutoZero_write) ENABLED START -----#

        cmd = "SYST:AZER:STAT " + str(data)
        
        self.socket_write(cmd)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.AutoZero_write
        
    def read_ZeroCheck(self, attr):
        self.debug_stream("In read_ZeroCheck()")
        #----- PROTECTED REGION ID(Keithley6485.ZeroCheck_read) ENABLED START -----#

        answer = self.socket_write_read("SYST:ZCH?")

        self.attr_ZeroCheck_read = int(answer)
        
        attr.set_value(self.attr_ZeroCheck_read)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.ZeroCheck_read
        
    def write_ZeroCheck(self, attr):
        self.debug_stream("In write_ZeroCheck()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(Keithley6485.ZeroCheck_write) ENABLED START -----#

        cmd = "SYST:ZCH " + str(data)
        
        self.socket_write(cmd)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.ZeroCheck_write
        
    def read_ZeroCorrect(self, attr):
        self.debug_stream("In read_ZeroCorrect()")
        #----- PROTECTED REGION ID(Keithley6485.ZeroCorrect_read) ENABLED START -----#
        
        answer = self.socket_write_read("SYST:ZCOR?")
        self.attr_ZeroCorrect_read = int(answer)
        
        attr.set_value(self.attr_ZeroCorrect_read)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.ZeroCorrect_read
        
    def write_ZeroCorrect(self, attr):
        self.debug_stream("In write_ZeroCorrect()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(Keithley6485.ZeroCorrect_write) ENABLED START -----#

        cmd = "SYST:ZCOR " + str(data)
        
        self.socket_write(cmd)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.ZeroCorrect_write
        
    def read_Range(self, attr):
        self.debug_stream("In read_Range()")
        #----- PROTECTED REGION ID(Keithley6485.Range_read) ENABLED START -----#
        
        answer = self.socket_write_read("SENS:CURR:RANG?")
        self.attr_Range_read = float(answer)
        
        attr.set_value(self.attr_Range_read)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.Range_read
        
    def write_Range(self, attr):
        self.debug_stream("In write_Range()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(Keithley6485.Range_write) ENABLED START -----#

        cmd = "SENS:CURR:RANG " + str(data)
        
        self.socket_write(cmd)

        
        #----- PROTECTED REGION END -----#	//	Keithley6485.Range_write
        
    def read_IntegrationRate(self, attr):
        self.debug_stream("In read_IntegrationRate()")
        #----- PROTECTED REGION ID(Keithley6485.IntegrationRate_read) ENABLED START -----#
        
        answer = self.socket_write_read("SENS:CURR:NPLC?")
        self.attr_IntegrationRate_read = float(answer)
        
        attr.set_value(self.attr_IntegrationRate_read)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.IntegrationRate_read
        
    def write_IntegrationRate(self, attr):
        self.debug_stream("In write_IntegrationRate()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(Keithley6485.IntegrationRate_write) ENABLED START -----#

        cmd = "SENS:CURR:NPLC " + str(data)
        
        self.socket_write(cmd)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.IntegrationRate_write
        
    def read_AutoRange(self, attr):
        self.debug_stream("In read_AutoRange()")
        #----- PROTECTED REGION ID(Keithley6485.AutoRange_read) ENABLED START -----#
        answer = self.socket_write_read("SENS:CURR:RANG:AUTO?")
        self.attr_AutoRange_read = int(answer)
        
        attr.set_value(self.attr_AutoRange_read)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.AutoRange_read
        
    def write_AutoRange(self, attr):
        self.debug_stream("In write_AutoRange()")
        data=attr.get_write_value()
        #----- PROTECTED REGION ID(Keithley6485.AutoRange_write) ENABLED START -----#
        cmd = "SENS:CURR:RANG:AUTO " + str(data)
        
        self.socket_write(cmd)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.AutoRange_write
        
    
    
        #----- PROTECTED REGION ID(Keithley6485.initialize_dynamic_attributes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.initialize_dynamic_attributes
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(Keithley6485.read_attr_hardware) ENABLED START -----#

    def socket_write(self, data):
        self.sock.send("%s\n" % data)

    def socket_write_read(self, data):
        self.sock.send("%s\n" % data)
        response = self.sock.recv(1024)

        # only the end character is sometimes not read at first try
        if hex(ord(response[len(response)-1])) != hex(10):
            tmp = self.sock.recv(1024)
        return response
        
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.read_attr_hardware


    #-----------------------------------------------------------------------------
    #    Keithley6485 command methods
    #-----------------------------------------------------------------------------
    
    def WriteCmd(self, argin):
        """ General command to send a command to the keithley
        
        :param argin: Command to be send
        :type: PyTango.DevString
        :return: 
        :rtype: PyTango.DevVoid """
        self.debug_stream("In WriteCmd()")
        #----- PROTECTED REGION ID(Keithley6485.WriteCmd) ENABLED START -----#

        self.socket_write(argin)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.WriteCmd
        
    def WriteReadCmd(self, argin):
        """ General command to send a command to the device and get an answer.
        
        :param argin: Command to send
        :type: PyTango.DevString
        :return: Answer from keithley
        :rtype: PyTango.DevString """
        self.debug_stream("In WriteReadCmd()")
        argout = ''
        #----- PROTECTED REGION ID(Keithley6485.WriteReadCmd) ENABLED START -----#

        argout = self.socket_write_read(argin)
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.WriteReadCmd
        return argout
        

    #----- PROTECTED REGION ID(Keithley6485.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Keithley6485.programmer_methods

class Keithley6485Class(PyTango.DeviceClass):
    #--------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(Keithley6485.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Keithley6485.global_class_variables

    def dyn_attr(self, dev_list):
        """Invoked to create dynamic attributes for the given devices.
        Default implementation calls
        :meth:`Keithley6485.initialize_dynamic_attributes` for each device
    
        :param dev_list: list of devices
        :type dev_list: :class:`PyTango.DeviceImpl`"""
    
        for dev in dev_list:
            try:
                dev.initialize_dynamic_attributes()
            except:
                import traceback
                dev.warn_stream("Failed to initialize dynamic attributes")
                dev.debug_stream("Details: " + traceback.format_exc())
        #----- PROTECTED REGION ID(Keithley6485.dyn_attr) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.dyn_attr

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'IPAdress':
            [PyTango.DevString,
            "Ip Adress of the terminal server",
            [] ],
        'PortNb':
            [PyTango.DevLong,
            "Port Number",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'WriteCmd':
            [[PyTango.DevString, "Command to be send"],
            [PyTango.DevVoid, "none"]],
        'WriteReadCmd':
            [[PyTango.DevString, "Command to send"],
            [PyTango.DevString, "Answer from keithley"]],
        }


    #    Attribute definitions
    attr_list = {
        'Current':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "A",
                'format': "%e",
            } ],
        'AutoZero':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value': "1",
                'min value': "0",
                'description': "0 -> disable, 1 -> enable",
            } ],
        'ZeroCheck':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value': "1",
                'min value': "0",
                'description': "0 -> disable, 1 -> enable",
            } ],
        'ZeroCorrect':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value': "1",
                'min value': "0",
                'description': "0 -> disable, 1 -> enable",
            } ],
        'Range':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "A",
                'description': "Range: specify expected reading",
            } ],
        'IntegrationRate':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'unit': "PLC",
                'max value': "6",
                'min value': "0.01",
                'description': "Integration rate in line cycles, ex. 5 = 50Hz",
            } ],
        'AutoRange':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'max value': "1",
                'min value': "0",
                'description': "0 -> disable, 1 -> enable",
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(Keithley6485Class,Keithley6485,'Keithley6485')
        #----- PROTECTED REGION ID(Keithley6485.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Keithley6485.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
