#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        Helicity.py
#
#  Project :     Helicity
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sergey.v.babenkov$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["Helicity", "HelicityClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(Helicity.additionnal_import) ENABLED START -----#
import socket
import time
import threading
#----- PROTECTED REGION END -----#	//	Helicity.additionnal_import

# Device States Description
# No states for this device


class Helicity (PyTango.Device_4Impl):
    """Helicity"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Helicity.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Helicity.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        Helicity.init_device(self)
        #----- PROTECTED REGION ID(Helicity.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Helicity.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(Helicity.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Helicity.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_plus_r_read = False
        self.attr_minus_r_read = False
        self.attr_cycle_running_read = False
        self.attr_assy_read = [0.0]
        self.attr_assy_x_read = [0.0]
        #----- PROTECTED REGION ID(Helicity.init_device) ENABLED START -----#
        self.time=0.0
        self.start=False
        self.tdc=PyTango.DeviceProxy("ktof/tdc/tdc1")
        self.hel_pl=0.0
        self.hel_min=0.0
        self.i=0
        if not 'assy' in dir(self):
            self.assy = threading.Thread(target=self.calc_assy)
            self.assy.setDaemon(True)
            self.assy.start()
        #----- PROTECTED REGION END -----#	//	Helicity.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(Helicity.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Helicity.always_executed_hook

    # -------------------------------------------------------------------------
    #    Helicity read/write attribute methods
    # -------------------------------------------------------------------------
    
    def write_Hel_plus(self, attr):
        self.debug_stream("In write_Hel_plus()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Helicity.Hel_plus_write) ENABLED START -----#
        if data==True:
            send_str="True"
            print (send_str)
            self.attr_plus_r_read=True
            self.attr_minus_r_read=False
            self.hel=PyTango.DeviceProxy("change/helicity/i0")
            self.hel.write_attribute("Hel_minus",False)
            self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.client.connect(('192.168.3.211',8080))
            send_str_enc=send_str.encode()
            self.client.send(send_str_enc)
        #----- PROTECTED REGION END -----#	//	Helicity.Hel_plus_write
        
    def write_Hel_minus(self, attr):
        self.debug_stream("In write_Hel_minus()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Helicity.Hel_minus_write) ENABLED START -----#
        if data==True:
            send_str="False"
            print (send_str)
            self.attr_plus_r_read=False
            self.attr_minus_r_read=True
            self.hel=PyTango.DeviceProxy("change/helicity/i0")
            self.hel.write_attribute("Hel_plus",False)
            self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.client.connect(('192.168.3.211',8080))
            send_str_enc=send_str.encode()
            self.client.send(send_str_enc)        
        #----- PROTECTED REGION END -----#	//	Helicity.Hel_minus_write
        
    def read_plus_r(self, attr):
        self.debug_stream("In read_plus_r()")
        #----- PROTECTED REGION ID(Helicity.plus_r_read) ENABLED START -----#
        attr.set_value(self.attr_plus_r_read)
        
        #----- PROTECTED REGION END -----#	//	Helicity.plus_r_read
        
    def read_minus_r(self, attr):
        self.debug_stream("In read_minus_r()")
        #----- PROTECTED REGION ID(Helicity.minus_r_read) ENABLED START -----#
        attr.set_value(self.attr_minus_r_read)
        
        #----- PROTECTED REGION END -----#	//	Helicity.minus_r_read
        
    def write_Start(self, attr):
        self.debug_stream("In write_Start()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Helicity.Start_write) ENABLED START -----#
        if data==True:
            if self.tdc.read_attribute("Acquisition_Running").value==False:
                self.tdc.write_attribute("CmdTrig_Acquisition_Start",1)
            elif self.tdc.read_attribute("Acquisition_Running").value==True:
                self.tdc.write_attribute("CmdTrig_Acquisition_Stop",1)
                time.sleep(0.1)
                self.tdc.write_attribute("CmdTrig_Acquisition_Start",1)
            self.i=0
            self.attr_assy_read=[0.0]
            
            self.attr_assy_x_read=[0.0]
            self.start=data
        elif data==False:
            self.start=data
            self.tdc.write_attribute("CmdTrig_Acquisition_Stop",1)
            
            
        #----- PROTECTED REGION END -----#	//	Helicity.Start_write
        
    def write_time(self, attr):
        self.debug_stream("In write_time()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Helicity.time_write) ENABLED START -----#
        self.time=data
        #----- PROTECTED REGION END -----#	//	Helicity.time_write
        
    def read_cycle_running(self, attr):
        self.debug_stream("In read_cycle_running()")
        #----- PROTECTED REGION ID(Helicity.cycle_running_read) ENABLED START -----#
        attr.set_value(self.attr_cycle_running_read)
        
        #----- PROTECTED REGION END -----#	//	Helicity.cycle_running_read
        
    def read_assy(self, attr):
        self.debug_stream("In read_assy()")
        #----- PROTECTED REGION ID(Helicity.assy_read) ENABLED START -----#
        attr.set_value(self.attr_assy_read)
        
        #----- PROTECTED REGION END -----#	//	Helicity.assy_read
        
    def read_assy_x(self, attr):
        self.debug_stream("In read_assy_x()")
        #----- PROTECTED REGION ID(Helicity.assy_x_read) ENABLED START -----#
        attr.set_value(self.attr_assy_x_read)
        
        #----- PROTECTED REGION END -----#	//	Helicity.assy_x_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(Helicity.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Helicity.read_attr_hardware


    # -------------------------------------------------------------------------
    #    Helicity command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(Helicity.programmer_methods) ENABLED START -----#
    def calc_assy(self):
        while True:
            if self.start==True:
                self.attr_cycle_running_read=True
                self.tdc.write_attribute("ExposureLive", 1)                                
                self.hel=PyTango.DeviceProxy("change/helicity/i0")
                self.hel.write_attribute("Hel_plus", True)
                time.sleep(1)                
                self.tdc.write_attribute("ExposureLive", self.time)
                time.sleep(self.time+0.5)
                self.hel_pl=float(self.tdc.read_attribute("Hist_Live_T").value[0]+self.tdc.read_attribute("Hist_Live_T").value[1])
                
                self.tdc.write_attribute("ExposureLive", 1)                                
                self.hel.write_attribute("Hel_minus", True)
                time.sleep(1)
                self.tdc.write_attribute("ExposureLive", self.time)
                time.sleep(self.time+0.5)
                self.hel_min=float(self.tdc.read_attribute("Hist_Live_T").value[0]+self.tdc.read_attribute("Hist_Live_T").value[1])
                
                self.tdc.write_attribute("ExposureLive", 1)
                if self.hel_pl!=0 and self.hel_min!=0 and self.start==True:                              
                    if self.i==0:
                        self.attr_assy_read[0]=((self.hel_pl-self.hel_min)/(self.hel_pl+self.hel_min))
                        self.attr_assy_x_read[0]=(self.i)
                    else:
                        self.attr_assy_read.append(100*round((self.hel_pl-self.hel_min)/(self.hel_pl+self.hel_min),3))
                        self.attr_assy_x_read.append(self.i)
                    self.i+=1                
                print (self.hel_pl, self.hel_min,self.attr_assy_read)
                self.attr_cycle_running_read=False
            time.sleep(1)
    #----- PROTECTED REGION END -----#	//	Helicity.programmer_methods

class HelicityClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(Helicity.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Helicity.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'Hel_plus':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'Hel_minus':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'plus_r':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'minus_r':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'Start':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'time':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'cycle_running':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ]],
        'assy':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 10000]],
        'assy_x':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 10000]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(HelicityClass, Helicity, 'Helicity')
        #----- PROTECTED REGION ID(Helicity.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Helicity.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
