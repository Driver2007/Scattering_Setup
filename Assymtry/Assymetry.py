#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        Assymetry.py
#
#  Project :     Assymetry
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      sergey.v.babenkov$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["Assymetry", "AssymetryClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(Assymetry.additionnal_import) ENABLED START -----#
import socket
import time
import threading
import numpy as np
import serial
import xlrd
import csv
import os
import time

BAUDRATE_FIL = 9600
PARITY = 'N'
STOPBITS = 1
BYTESIZE = 8
TIMEOUT = 0.1 


Error_codes_FIL = {
    '0': 'No error, no error',
    '-100': 'Command error, Command unknown',
    '-102': 'Syntax error, command syntax wrond',
    '-108': 'Parameter not allowed, a command was sent with a parameter though the command doesnt use parameters',
    '-200': 'Execution error, command could not be executed',
    '-201': 'invalid while in local, control command could not be executed, because device is in LOCAL mode',
    '-221': 'Settings conflict, command could not be executed because of the condition of the device (being in MENU etc.)',
    '-222': 'Data out of range, Parameter could not be set because it exceeded a limit',
    '-223': 'Too much data, Too many parameters per command or too many commands at once',
    '-224': 'Illegal parameter value, A parameter not specified for the command has been sent'
}

class EA_PSI:
    ETX = chr(3)  # \x03
    CR = chr(13)
    LF = chr(10)
    ENQ = chr(5)  # \x05
    ACK = chr(6)  # \x06
    NAK = chr(21)  # \x15
    def __init__(self):
        self.ser = None
        self.connected = False
        self.conn_callbacks = []
        self.last_dist = {}
        self.busy = False
        
    def connect(self, comport):
        self.ser = serial.Serial(comport, baudrate=BAUDRATE_FIL, parity=PARITY, stopbits=STOPBITS, bytesize=BYTESIZE, timeout=TIMEOUT)
        if not self.ser.isOpen():
            print("Error while connecting.")
            return False
        else:
            self.busy = False
            self.connected = True
            print("Connected.")
            for c in self.conn_callbacks:
                c(True)
            return True
    
    def close(self):
        print("Shutting down serial connection")
        if self.ser and self.ser.isOpen():
            self.ser.close()
            return True
        return False

    def _cr_lf(self, string):
        """Pad carriage return and line feed to a string

        :param string: String to pad
        :type string: str
        :returns: the padded string
        :rtype: str
        """
        return string + self.CR + self.LF

    def _get_data(self):
        """Get the data that is ready on the device

        :returns: the raw data
        :rtype:str
        """
        #self.serial.write(self.ENQ)
        data = self.ser.readline()
        return data.rstrip(self.LF).rstrip(self.CR)

    def _send_command(self, command):
        """Send a command and check if it is positively acknowledged

        :param command: The command to send
        :type command: str
        :raises IOError: if the negative acknowledged or a unknown response
            is returned
        """
        while self.busy == True:
            print ("delay at PSI!")
            time.sleep(0.01)
        self.busy = True
        s=self._cr_lf(command)
        self.ser.write(s)
        response = self._get_data()
        if len(response)>0 and response[0]=='-':
            print (Error_codes_FIL[response])
        else:
            self.busy = False
            return response
        
    ##################On OFF REMOTE###############
    def Remote_on(self):
        print ("set remote connection")
        command='SYST:LOCK ON'
        self._send_command(command)
    def Remote_off(self):
        command='SYST:LOCK OFF'
        self._send_command(command)
        


    ##################On OFF###############
    def on_FIL(self):
        """switch output voltage on"""
        command='OUTPut ON'
        self._send_command(command)
        
    def off_FIL(self):
        """switch output voltage off"""
        command='OUTPut OFF'
        self._send_command(command)

    ######################Current
    def set_current_limit_FIL(self, current):
        command='CURRent '+current
        self._send_command(command)

    def get_current_FIL(self):

        command='MEASure:CURRent?'
        response=self._send_command(command)
        return response[0:4]
        
    def get_current_limit_FIL(self):

        command='CURRent?'
        response=self._send_command(command)
        return response[0:4]
    ######################Voltage
    def set_output_voltage_FIL(self, voltage):

        command='VOLTage '+voltage
        self._send_command(command)

    def get_voltage_FIL(self):
        command='MEASure:VOLTage?'
        response=self._send_command(command)
        return response[0:4]

    def get_voltage_limit_FIL(self):
        command='VOLTage?'
        response=self._send_command(command)
        return response[0:4]
#----- PROTECTED REGION END -----#	//	Assymetry.additionnal_import

# Device States Description
# No states for this device


class Assymetry (PyTango.Device_4Impl):
    """Assymetry"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Assymetry.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Assymetry.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        Assymetry.init_device(self)
        #----- PROTECTED REGION ID(Assymetry.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Assymetry.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(Assymetry.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Assymetry.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_iteration_progress_read = 0.0
        self.attr_total_progress_read = 0.0
        self.attr_estimated_iteration_time_read = ""
        self.attr_estimated_total_time_read = ""
        self.attr_current_iteration_read = 0
        self.attr_voltage_read_read = 0.0
        self.attr_curent_read_read = 0.0
        self.attr_status_of_server_read = ""
        self.attr_assymetry_vs_energy_X_read = [0.0]
        self.attr_assymetry_vs_energy_Y_read = [0.0]
        #----- PROTECTED REGION ID(Assymetry.init_device) ENABLED START -----#

        self.file_path = ""
        self.file_name = ""
        self.file_prefix = ""
        self.dev_FIL = EA_PSI()
        self.comport = "/dev/ttyACM0"
        self.look_up_table = "look_up_table.xlsx"
        self.connected_to_power_supply=False
        self.change_scale_trig = False
        self.self_check=True
        self.measurements_trigger = False        
        
        self.energy_start = 0.0
        self.energy_stop = 0.0
        self.energy_step = 0.0
        self.accu_time = 0
        self.iterations = 0
        
        
        if not 'scale_thread' in dir(self):
            self.scale_thread = threading.Thread(target=self.change_scale)
            self.scale_thread.setDaemon(True)
            self.scale_thread.start()
            
        if not 'assy' in dir(self):
            self.assy_vs_energy = threading.Thread(target=self.calc_assy_vs_energy)
            self.assy_vs_energy.setDaemon(True)
            self.assy_vs_energy.start()        

        self.serial_connect_FIL()
        #----- PROTECTED REGION END -----#	//	Assymetry.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(Assymetry.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Assymetry.always_executed_hook

    # -------------------------------------------------------------------------
    #    Assymetry read/write attribute methods
    # -------------------------------------------------------------------------
    
    def write_energy_start(self, attr):
        self.debug_stream("In write_energy_start()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.energy_start_write) ENABLED START -----#
        self.energy_start = data
        self.change_scale_trig = True
        #----- PROTECTED REGION END -----#	//	Assymetry.energy_start_write
        
    def write_energy_stop(self, attr):
        self.debug_stream("In write_energy_stop()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.energy_stop_write) ENABLED START -----#
        self.energy_stop = data
        self.change_scale_trig = True
        #----- PROTECTED REGION END -----#	//	Assymetry.energy_stop_write
        
    def write_energy_step(self, attr):
        self.debug_stream("In write_energy_step()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.energy_step_write) ENABLED START -----#
        self.energy_step = data
        self.change_scale_trig = True
        #----- PROTECTED REGION END -----#	//	Assymetry.energy_step_write
        
    def write_accu_time(self, attr):
        self.debug_stream("In write_accu_time()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.accu_time_write) ENABLED START -----#
        self.accu_time = data
        self.change_scale_trig = True
        #----- PROTECTED REGION END -----#	//	Assymetry.accu_time_write
        
    def write_iterations(self, attr):
        self.debug_stream("In write_iterations()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.iterations_write) ENABLED START -----#
        self.iterations = data
        self.change_scale_trig = True
        #----- PROTECTED REGION END -----#	//	Assymetry.iterations_write
        
    def write_start(self, attr):
        self.debug_stream("In write_start()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.start_write) ENABLED START -----#
        self.measurements_trigger = True
        #----- PROTECTED REGION END -----#	//	Assymetry.start_write
        
    def write_stop(self, attr):
        self.debug_stream("In write_stop()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.stop_write) ENABLED START -----#
        self.measurements_trigger = False
        #----- PROTECTED REGION END -----#	//	Assymetry.stop_write
        
    def read_iteration_progress(self, attr):
        self.debug_stream("In read_iteration_progress()")
        #----- PROTECTED REGION ID(Assymetry.iteration_progress_read) ENABLED START -----#
        attr.set_value(self.attr_iteration_progress_read)
        
        #----- PROTECTED REGION END -----#	//	Assymetry.iteration_progress_read
        
    def read_total_progress(self, attr):
        self.debug_stream("In read_total_progress()")
        #----- PROTECTED REGION ID(Assymetry.total_progress_read) ENABLED START -----#
        attr.set_value(self.attr_total_progress_read)
        
        #----- PROTECTED REGION END -----#	//	Assymetry.total_progress_read
        
    def read_estimated_iteration_time(self, attr):
        self.debug_stream("In read_estimated_iteration_time()")
        #----- PROTECTED REGION ID(Assymetry.estimated_iteration_time_read) ENABLED START -----#
        attr.set_value(self.attr_estimated_iteration_time_read)
        
        #----- PROTECTED REGION END -----#	//	Assymetry.estimated_iteration_time_read
        
    def write_save_trigger(self, attr):
        self.debug_stream("In write_save_trigger()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.save_trigger_write) ENABLED START -----#
        if self.file_path=="" or self.file_name=="" or os.path.exists(self.file_path) != True:
            print ("Check file path!")
            self.attr_status_of_server_read = "Check file path!"
        else:
            now = time.strftime("%Y_%m_%d", time.gmtime())
            path = os.path.join(self.file_path, now) 
            if not os.path.exists(path):
                os.makedirs(path)
            full_path_csv = os.path.join(path, str(self.file_prefix)+"_"+self.file_name+".csv")
            full_path_txt = os.path.join(path, str(self.file_prefix)+"_"+self.file_name+".txt")
            print (full_path_csv)
            with open(full_path_csv,"w+") as my_csv:
                print ("saving")
                csvWriter = csv.writer(my_csv)
                csvWriter.writerows(self.array_assymetry_vs_energy_Y)                
            
            np.savetxt(full_path_txt, np.c_[self.attr_assymetry_vs_energy_X_read, self.attr_assymetry_vs_energy_Y_read], delimiter=";")
        
        #----- PROTECTED REGION END -----#	//	Assymetry.save_trigger_write
        
    def write_file_name(self, attr):
        self.debug_stream("In write_file_name()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.file_name_write) ENABLED START -----#
        self.file_name = data 
        #----- PROTECTED REGION END -----#	//	Assymetry.file_name_write
        
    def write_file_path(self, attr):
        self.debug_stream("In write_file_path()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.file_path_write) ENABLED START -----#
        self.file_path = data
        #----- PROTECTED REGION END -----#	//	Assymetry.file_path_write
        
    def write_select_file_path(self, attr):
        self.debug_stream("In write_select_file_path()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.select_file_path_write) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Assymetry.select_file_path_write
        
    def write_file_prefix(self, attr):
        self.debug_stream("In write_file_prefix()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.file_prefix_write) ENABLED START -----#
        self.file_prefix = data
        #----- PROTECTED REGION END -----#	//	Assymetry.file_prefix_write
        
    def read_estimated_total_time(self, attr):
        self.debug_stream("In read_estimated_total_time()")
        #----- PROTECTED REGION ID(Assymetry.estimated_total_time_read) ENABLED START -----#
        attr.set_value(self.attr_estimated_total_time_read)
        
        #----- PROTECTED REGION END -----#	//	Assymetry.estimated_total_time_read
        
    def read_current_iteration(self, attr):
        self.debug_stream("In read_current_iteration()")
        #----- PROTECTED REGION ID(Assymetry.current_iteration_read) ENABLED START -----#
        attr.set_value(self.attr_current_iteration_read)
        
        #----- PROTECTED REGION END -----#	//	Assymetry.current_iteration_read
        
    def write_voltage(self, attr):
        self.debug_stream("In write_voltage()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.voltage_write) ENABLED START -----#
        if self.connected_to_power_supply == True:            
            self.dev_FIL.set_output_voltage_FIL(str(data))
        #----- PROTECTED REGION END -----#	//	Assymetry.voltage_write
        
    def write_current(self, attr):
        self.debug_stream("In write_current()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.current_write) ENABLED START -----#
        if self.connected_to_power_supply == True:            
            self.dev_FIL.set_current_limit_FIL(str(data))     
        #----- PROTECTED REGION END -----#	//	Assymetry.current_write
        
    def read_voltage_read(self, attr):
        self.debug_stream("In read_voltage_read()")
        #----- PROTECTED REGION ID(Assymetry.voltage_read_read) ENABLED START -----#
        if self.connected_to_power_supply == True:
            voltage = float(self.dev_FIL.get_voltage_FIL())
            self.attr_voltage_read_read = voltage
        attr.set_value(self.attr_voltage_read_read)
        
        #----- PROTECTED REGION END -----#	//	Assymetry.voltage_read_read
        
    def read_curent_read(self, attr):
        self.debug_stream("In read_curent_read()")
        #----- PROTECTED REGION ID(Assymetry.curent_read_read) ENABLED START -----#
        if self.connected_to_power_supply == True:            
            self.attr_curent_read_read = float(self.dev_FIL.get_current_FIL())       
        attr.set_value(self.attr_curent_read_read)
        
        #----- PROTECTED REGION END -----#	//	Assymetry.curent_read_read
        
    def write_On_Off_Fil_test(self, attr):
        self.debug_stream("In write_On_Off_Fil_test()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Assymetry.On_Off_Fil_test_write) ENABLED START -----#
        if self.connected_to_power_supply == True:
            if data == 1:
                self.dev_FIL.on_FIL()
            elif data == 0:
                self.dev_FIL.off_FIL()        
        #----- PROTECTED REGION END -----#	//	Assymetry.On_Off_Fil_test_write
        
    def read_status_of_server(self, attr):
        self.debug_stream("In read_status_of_server()")
        #----- PROTECTED REGION ID(Assymetry.status_of_server_read) ENABLED START -----#
        attr.set_value(self.attr_status_of_server_read)
        
        #----- PROTECTED REGION END -----#	//	Assymetry.status_of_server_read
        
    def read_assymetry_vs_energy_X(self, attr):
        self.debug_stream("In read_assymetry_vs_energy_X()")
        #----- PROTECTED REGION ID(Assymetry.assymetry_vs_energy_X_read) ENABLED START -----#
        attr.set_value(self.attr_assymetry_vs_energy_X_read)
        
        #----- PROTECTED REGION END -----#	//	Assymetry.assymetry_vs_energy_X_read
        
    def read_assymetry_vs_energy_Y(self, attr):
        self.debug_stream("In read_assymetry_vs_energy_Y()")
        #----- PROTECTED REGION ID(Assymetry.assymetry_vs_energy_Y_read) ENABLED START -----#
        attr.set_value(self.attr_assymetry_vs_energy_Y_read)
        
        #----- PROTECTED REGION END -----#	//	Assymetry.assymetry_vs_energy_Y_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(Assymetry.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Assymetry.read_attr_hardware


    # -------------------------------------------------------------------------
    #    Assymetry command methods
    # -------------------------------------------------------------------------
    

    #----- PROTECTED REGION ID(Assymetry.programmer_methods) ENABLED START -----#

    def serial_connect_FIL(self):
        self.connected_to_power_supply = self.dev_FIL.connect(self.comport)
        if self.connected_to_power_supply:
            self.dev_FIL.Remote_on()
        
        
    def change_scale(self):
        while True:
            if self.change_scale_trig == True and self.energy_step != 0.0 and self.energy_start < self.energy_stop:
                self.attr_assymetry_vs_energy_X_read=np.arange(self.energy_start, 
						self.energy_stop+round(self.energy_step/3,5), 
						round(self.energy_step,3),
						dtype=np.float32)
                print (self.attr_assymetry_vs_energy_X_read)                
                self.attr_assymetry_vs_energy_Y_read=[0]*len(self.attr_assymetry_vs_energy_X_read)
                self.array_assymetry_vs_energy_Y = np.zeros((len(self.attr_assymetry_vs_energy_X_read), self.iterations))
                iter_time = 2*len(self.attr_assymetry_vs_energy_Y_read)*self.accu_time
                self.attr_estimated_iteration_time_read = str(iter_time)
                self.attr_estimated_total_time_read = str(iter_time*self.iterations)
                self.change_scale_trig=False
            time.sleep(1)

    def calc_assy(self, voltage_index):
        self.tdc.write_attribute("ExposureLive", 1)                                
        self.hel.write_attribute("Hel_plus", True)
        time.sleep(1)                
        self.tdc.write_attribute("ExposureLive", self.accu_time)
        time.sleep(self.accu_time+0.5)
        self.hel_pl=float(self.tdc.read_attribute("Hist_Live_T").value[0]+self.tdc.read_attribute("Hist_Live_T").value[1])

        self.tdc.write_attribute("ExposureLive", 1)                                
        self.hel.write_attribute("Hel_minus", True)
        time.sleep(1)
        self.tdc.write_attribute("ExposureLive", self.accu_time)
        time.sleep(self.accu_time+0.5)
        self.hel_min=float(self.tdc.read_attribute("Hist_Live_T").value[0]+self.tdc.read_attribute("Hist_Live_T").value[1])

        self.tdc.write_attribute("ExposureLive", 1)
        self.array_assymetry_vs_energy_Y[voltage_index][self.attr_current_iteration_read - 1] = (self.hel_pl-self.hel_min)/(self.hel_pl+self.hel_min)
        y = 0
        for i in range(self.attr_current_iteration_read):
            print (i)
            y += self.array_assymetry_vs_energy_Y[voltage_index][i]
        self.attr_assymetry_vs_energy_Y_read[voltage_index]  = y / self.attr_current_iteration_read
        if voltage_index == 0:
            print ("iteration", self.attr_current_iteration_read)
            print ("hel plus = ", self.hel_pl)
            print ("hel minus = ", self.hel_min)
            print (self.array_assymetry_vs_energy_Y[0][0],self.array_assymetry_vs_energy_Y[0][1],self.array_assymetry_vs_energy_Y[0][2])
            print ("average = ", self.attr_assymetry_vs_energy_Y_read[voltage_index])
            
    def iteration(self,worksheet):
        VOLTAGE_PRECIGION = 0.2
        self.tdc=PyTango.DeviceProxy("ktof/tdc/tdc1")
        self.ISEG=PyTango.DeviceProxy("spin_gun/lens/logic")
        self.hel=PyTango.DeviceProxy("change/helicity/i0")
        for i in range(len(self.attr_assymetry_vs_energy_X_read)):
            self.dev_FIL.set_output_voltage_FIL(str(self.attr_assymetry_vs_energy_X_read[i]))
            while abs(self.attr_voltage_read_read - self.attr_assymetry_vs_energy_X_read[i]) > VOLTAGE_PRECIGION:
                time.sleep(0.01)
            for ws_col in range(worksheet.ncols):
                if worksheet.cell(0, ws_col).value is not xlrd.XL_CELL_EMPTY:
                    self.ISEG.write_attribute(str(worksheet.cell(0, ws_col).value) + "_VUSet", float(worksheet.cell(i+1, ws_col).value))
                    while abs(self.ISEG.read_attribute(str(worksheet.cell(0, ws_col).value)+"_VURead").value - float(worksheet.cell(i+1, ws_col).value)) > VOLTAGE_PRECIGION:
                        time.sleep(0.01)   
            self.calc_assy(i)
            
            self.attr_iteration_progress_read = round(100*(i+1)/len(self.attr_assymetry_vs_energy_X_read),2)
            self.attr_total_progress_read = round(100*(self.attr_current_iteration_read-1)/self.iterations, 2) + self.attr_iteration_progress_read/self.iterations
            
    def calc_assy_vs_energy(self):
        while True:
            if self.measurements_trigger:
                print ("start measurements")
                self.attr_iteration_progress_read = 0
                self.attr_total_progress_read = 0
                self.attr_assymetry_vs_energy_Y_read=[0]*len(self.attr_assymetry_vs_energy_X_read)
                self.attr_status_of_server_read = "Measurements in progress!"
                if self.connected_to_power_supply:
                    self.dev_FIL.on_FIL()
                    print ("switch on power supply")
                    workbook = xlrd.open_workbook(self.look_up_table)
                    worksheet = workbook.sheet_by_index(0)
                    for i in range (worksheet.nrows):
                        for j in range (worksheet.ncols):
                            if worksheet.cell(i, j).value is xlrd.XL_CELL_EMPTY:
                                print ("problem with excel file!")
                                self.attr_status_of_server_read = "problem with excel file!"
                                self.self_check = False
                                self.measurements_trigger = False
                            if self.self_check == False:
                                break
                        if self.self_check == False:
                            break
                    if len(self.attr_assymetry_vs_energy_X_read) != worksheet.nrows-1:
                        self.measurements_trigger = False
                        self.self_check = False
                        print ("energy range does not correspond to excel file!")
                        self.attr_status_of_server_read = "energy range does not correspond to excel file!"
                    if self.self_check == True:
                        for i in range(self.iterations):
                            self.attr_current_iteration_read = i+1
                            if self.measurements_trigger == False:
                                break
                            self.attr_iteration_progress_read = 0
                            self.iteration(worksheet)
                        self.attr_total_progress_read = 100
                        self.attr_status_of_server_read = "Measurements done!"
                        self.measurements_trigger = False
            time.sleep(1)
    #----- PROTECTED REGION END -----#	//	Assymetry.programmer_methods

class AssymetryClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(Assymetry.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	Assymetry.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        }


    #    Attribute definitions
    attr_list = {
        'energy_start':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'energy_stop':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'energy_step':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'accu_time':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'iterations':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'start':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'stop':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'iteration_progress':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period': "1000",
            } ],
        'total_progress':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period': "1000",
            } ],
        'estimated_iteration_time':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'save_trigger':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'file_name':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'file_path':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'select_file_path':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'file_prefix':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.WRITE],
            {
                'Memorized':"true"
            } ],
        'estimated_total_time':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'current_iteration':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.READ]],
        'voltage':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'current':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'voltage_read':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'Polling period': "1000",
            } ],
        'curent_read':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'On_Off_Fil_test':
            [[PyTango.DevLong,
            PyTango.SCALAR,
            PyTango.WRITE]],
        'status_of_server':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ]],
        'assymetry_vs_energy_X':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 10000]],
        'assymetry_vs_energy_Y':
            [[PyTango.DevDouble,
            PyTango.SPECTRUM,
            PyTango.READ, 10000]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(AssymetryClass, Assymetry, 'Assymetry')
        #----- PROTECTED REGION ID(Assymetry.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	Assymetry.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
